{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChance","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACxB,6BACKL,EAAMI,QAAQE,OAEnB,4BAAIN,EAAMI,QAAQG,YCHbC,G,MAAY,SAACR,GAEtB,OADAS,QAAQC,IAAIV,GAER,qBAAKC,UAAW,YAAhB,SACKD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OAC3B,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCPpBQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACIC,KAAK,SACLf,UAAY,SACZa,YAAeA,EACfG,SAAYF,MCgCLG,E,kDAlCb,aAAc,IAAD,8BACX,gBAEKC,MAAM,CACTR,SAAU,GACVS,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAG1C,WAAS,IAAD,OACN,EAA+BE,KAAKR,MAA7BR,EAAP,EAAOA,SAASS,EAAhB,EAAgBA,YACVQ,EAAmBjB,EAASkB,QAAO,SAAAzB,GAAO,OAC9CA,EAAQE,KAAKwB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK7B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACAa,YAAY,iBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAcY,EAAEC,OAAOC,WAEzD,cAAC,EAAD,CAAUvB,SAAUiB,W,GA7BVO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.acdad9d8.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = (props) => (\n    <div className = 'card-container'>\n        <img alt = \"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2>\n            {props.monster.name}\n        </h2>\n        <p>{props.monster.email}</p>\n    </div>\n) ","import React from \"react\";\n\nimport {Card} from \"../card/card.component\";\n\nimport './card-list.component.css'\n\nexport const CardList  = (props) => {\n    console.log(props);\n    return(\n        <div className= 'card-list'>\n            {props.monsters.map(monster => (\n            <Card key = {monster.id} monster = {monster} />)\n          )}\n        </div>)\n}","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder,handleChance}) => (\n    <input\n        type=\"search\" \n        className = 'search'\n        placeholder = {placeholder}\n        onChange = {handleChance}\n    />\n)","import './App.css';\nimport React, { Component } from 'react';\n\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    \n    this.state={\n      monsters :[],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  render(){\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return(\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n        placeholder='Search Monster'\n        handleChance={e => this.setState({searchField : e.target.value})}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}